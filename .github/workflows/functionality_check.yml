name: Check correctness template generation functionality

on:
  push:
    branches:
      - master

jobs:
  template_checking:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        env:
          - PACKAGE_NAME: 'my.fancy.pack'
            UI: compose_swift_ui
            DI: koin
            NETWORKING: ktor
            NAVIGATION: voyager_navigation
            VIEW_MODEL: view_model
            LOCAL_STORAGE: sql_delight
            LOCAL_PREFERENCES: multiplatform_settings
            LINTER: detekt
          - PACKAGE_NAME: 'another.fancy.pack'
            UI: compose_swift_ui
            DI: koin
            NETWORKING: graphql
            NAVIGATION: compose_navigation
            VIEW_MODEL: view_model
            LOCAL_STORAGE: sql_delight
            LOCAL_PREFERENCES: multiplatform_settings
            LINTER: detekt
          - PACKAGE_NAME: 'superb.duper.pack'
            UI: compose
            DI: koin
            NETWORKING: ktor
            NAVIGATION: voyager_navigation
            VIEW_MODEL: view_model
            LOCAL_STORAGE: sql_delight
            LOCAL_PREFERENCES: multiplatform_settings
            LINTER: detekt
          - PACKAGE_NAME: 'none'
            UI: compose
            DI: koin
            NETWORKING: graphql
            NAVIGATION: compose_navigation
            VIEW_MODEL: view_model
            LOCAL_STORAGE: sql_delight
            LOCAL_PREFERENCES: multiplatform_settings
            LINTER: detekt

    env: ${{ matrix.env }}
      

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          node20: true

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master

      - name: Install latest Git
        run: sudo apt-get update && sudo apt-get install -y git

      - name: Making scripts runnable
        run: chmod +x scripts/*.sh

      - name: Package name validation
        run: |
          scripts/package_name_validation.sh ${{ env.PACKAGE_NAME }}

      - name: Fetch all branches
        run: git fetch --all

      - name: Git configuration
        run: |
          git config user.name "GitHub Action"
          git config user.email "Github@action.com"

      - name: Creating kmm_template branch
        run: |
          git add .
          git commit -m "Added ancommeted changes"
          git checkout $UI
          git checkout -b kmm_template

      - name: Merge UI branch
        run: |
          git merge -m "Merge message" master --allow-unrelated-histories || {
            git add .
            git commit -m "Fixed merge conflicts"
          }

      - name: Merge DI branch
        if: env.DI != 'none'
        uses: ./.github/actions/resolve-merge-conflicts
        with:
          branch: ${{ env.DI }}
          ui: ${{ env.UI }}
        continue-on-error: true

      - name: Merge Navigation branch
        if: env.NAVIGATION != 'none'
        uses: ./.github/actions/resolve-merge-conflicts
        with:
          branch: ${{ env.NAVIGATION }}
          ui: ${{ env.UI }}
        continue-on-error: true

      - name: Merge View Model branch
        if: env.VIEW_MODEL != 'none'
        uses: ./.github/actions/resolve-merge-conflicts
        with:
          branch: ${{ env.VIEW_MODEL }}
          ui: ${{ env.UI }}
        continue-on-error: true

      - name: Merge Local Storage Branch
        if: env.LOCAL_STORAGE != 'none'
        uses: ./.github/actions/resolve-merge-conflicts
        with:
          branch: ${{ env.LOCAL_STORAGE }}
          ui: ${{ env.UI }}
        continue-on-error: true

      - name: Merge Local Preferences Branch
        if: env.LOCAL_PREFERENCES != 'none'
        uses: ./.github/actions/resolve-merge-conflicts
        with:
          branch: ${{ env.LOCAL_PREFERENCES }}
          ui: ${{ env.UI }}
        continue-on-error: true

      - name: Merge Linter Branch
        if: env.LINTER != 'none'
        uses: ./.github/actions/resolve-merge-conflicts
        with:
          branch: ${{ env.LINTER }}
          ui: ${{ env.UI }}
        continue-on-error: true

      - name: Merge Networking branch new
        if: env.NETWORKING != 'none'
        uses: ./.github/actions/resolve-merge-conflicts
        with:
          branch: ${{ env.NETWORKING }}
          ui: ${{ env.UI }}
        continue-on-error: true

      - name: Rename project package
        if: env.PACKAGE_NAME != 'none'
        run: |
          echo "${{ env.PACKAGE_NAME }}"
          echo 's/co.daresay.kmmtemplate/${{ env.PACKAGE_NAME }}/g'
          echo 's/co.daresay.kmmtemplate/"${{ env.PACKAGE_NAME }}/g"'
          ls
          pwd
          ./scripts/rename_package.sh ${{ env.PACKAGE_NAME }}

      - name: Removing unnecessary files and folders
        run: |
          rm -rf ./git
          rm -rf ./github
          rm -rf scripts

      - name: Sync project and run build
        run: ./gradlew assembleDebug

      - name: Specify name of repository
        if: always()
        id: repository_name
        run: |
          UI="${{ env.UI }}"
          DI="${{ env.DI }}"
          NETWORKING="${{ env.NETWORKING }}"
          NAVIGATION="${{ env.NAVIGATION }}"
          VIEW_MODEL="${{ env.VIEW_MODEL }}"
          LOCAL_STORAGE="${{ env.LOCAL_STORAGE }}"
          LOCAL_PREFERENCES="${{ env.LOCAL_PREFERENCES }}"
          LINTER="${{ env.LINTER }}"
          NAME=""

          for item in "$UI" "$DI" "$NETWORKING" "$NAVIGATION" "$VIEW_MODEL" "$LOCAL_STORAGE" "$LOCAL_PREFERENCES" "$LINTER"; do
            if [ "$item" != "none" ]; then
              [ -n "$NAME" ] && NAME="${NAME}_"
              NAME="${NAME}${item}"
            fi
          done

          echo "repository_name=$NAME" >> $GITHUB_OUTPUT

      - name: Upload project artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "template_with_${{ steps.repository_name.outputs.repository_name }}"
          path: .
          retention-days: 1
